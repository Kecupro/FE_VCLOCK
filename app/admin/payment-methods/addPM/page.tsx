"use client";

import React, { useEffect, useRef, useState } from 'react';
import { useAppContext } from '../../../context/AppContext';
import { useRouter } from 'next/navigation';
import styles from '../../assets/css/add.module.css';
import Link from 'next/link';
import Image from 'next/image';
import { Editor } from '@tinymce/tinymce-react';
import { Editor as TinyMCEEditor } from 'tinymce';
import { ToastContainer, toast } from 'react-toastify';

const AddPaymentMethodPage = () => {
  const [status, setStatus] = useState<boolean>(true);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [activeTab, setActiveTab] = useState<'upload' | 'preview'>('upload');

  const nameRef = useRef<HTMLInputElement>(null);
  const codeRef = useRef<HTMLInputElement>(null);
  const contentRef = useRef<TinyMCEEditor | null>(null);

  const { isDarkMode } = useAppContext();
  const router = useRouter();

  useEffect(() => {
    const html = document.documentElement;
    if (isDarkMode) html.classList.add(styles['dark-mode']);
    else html.classList.remove(styles['dark-mode']);
  }, [isDarkMode]);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  const file = e.target.files?.[0] || null;

  if (!file) {
    setSelectedFile(null);
    return;
  }

  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];

  if (!allowedTypes.includes(file.type)) {
    toast.error('Ch·ªâ cho ph√©p file ·∫£nh (.jpg, .jpeg, .png, .webp)!');
    e.target.value = '';
    setSelectedFile(null);
    return;
  }

  if (file.size > 10 * 1024 * 1024) {
    toast.error('·∫¢nh v∆∞·ª£t qu√° dung l∆∞·ª£ng cho ph√©p (t·ªëi ƒëa 10MB)!');
    e.target.value = '';
    setSelectedFile(null);
    return;
  }

  setSelectedFile(file);
  setActiveTab('preview');
  };

  const handleTabClick = (tab: 'upload' | 'preview') => {
    setActiveTab(tab);
    if (tab == 'upload') document.getElementById('fileInput')?.click();
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const name = nameRef.current?.value.trim();
    const code = codeRef.current?.value.trim();
    const description = contentRef.current?.getContent().trim();

    if (!name || !code || !description) {
      toast.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.');
      return;
    }

    if (!selectedFile) {
      toast.error('Vui l√≤ng ch·ªçn bi·ªÉu t∆∞·ª£ng.');
      return;
    }

    if (selectedFile.size > 10 * 1024 * 1024) {
      toast.error('·∫¢nh kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n 10MB.');
      return;
    }

    const formData = new FormData();
    formData.append('name', name);
    formData.append('code', code);
    formData.append('description', description);
    formData.append('is_active', String(status));
    formData.append('image', selectedFile);

    try {
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/admin/payment-method/them`, {
        method: 'POST',
        body: formData,
      });

      const data = await res.json();
      if (res.ok) {
        toast.success('Th√™m ph∆∞∆°ng th·ª©c thanh to√°n th√†nh c√¥ng!');
        setTimeout(() => {
          router.push('/admin/payment-methods');
        }, 1500);
      } else {
        toast.error(`L·ªói: ${data.error || 'Kh√¥ng x√°c ƒë·ªãnh'}`);
      }
    } catch {
      toast.error('ƒê√£ x·∫£y ra l·ªói khi th√™m ph∆∞∆°ng th·ª©c.');
    }
  };

  return (
    <main className={styles.container}>
      <div className={styles.header}>
        <h1 className={styles.title}>Th√™m ph∆∞∆°ng th·ª©c thanh to√°n</h1>
        <Link href="/admin/payment-methods" className={styles.returnButton}>
          Quay l·∫°i
        </Link>
      </div>

      <form className={styles.form} onSubmit={handleSubmit}>
        <div className={styles.formGroup}>
          <label className={styles.label}>T√™n ph∆∞∆°ng th·ª©c <span style={{ color: 'red' }}>*</span></label>
          <input ref={nameRef} type="text" className={styles.input} placeholder="VD: Chuy·ªÉn kho·∫£n Ng√¢n h√†ng..." />
        </div>

        <div className={styles.formGroup}>
          <label className={styles.label}>M√£ code <span style={{ color: 'red' }}>*</span></label>
          <input ref={codeRef} type="text" className={styles.input} placeholder="VD: BANK_TRANSFER..." />
        </div>

        <div className={`${styles.formGroup} ${styles.fullWidth}`}>
          <label className={styles.label}>M√¥ t·∫£ <span style={{color: "red"}}>*</span></label>
          <div className={styles.tinymceWrapper}>
          <Editor
            onInit={(evt, editor) => (contentRef.current = editor)}
            init={{
              height: 400,
              menubar: false,
              plugins: 'advlist autolink lists link image charmap preview',
              toolbar:
                'undo redo | formatselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent',
              skin: false,
              content_css: false,
              content_style: `
                body {
                  font-family: 'Inter', sans-serif;
                  font-size: 14px;
                  padding: 16px;
                }
              `,
              branding: false,
            }}
            tinymceScriptSrc="https://cdn.tiny.cloud/1/3n407w2hrdm50486yfaarb459wuuvhbzuzs8d2grfyt4bouf/tinymce/6/tinymce.min.js"
          />
          </div>
        </div>

        <div className={styles.formGroup}>
          <label className={styles.label}>Bi·ªÉu t∆∞·ª£ng (·∫£nh) <span style={{ color: 'red' }}>*</span></label>
          <div className={styles.imageSection}>
            <div className={styles.imageTabs}>
              <button
                type="button"
                className={`${styles.imageTab} ${activeTab == 'upload' ? styles.imageTabActive : ''}`}
                onClick={() => handleTabClick('upload')}
              >
                Ch·ªçn t·ªáp
              </button>
              <button
                type="button"
                className={`${styles.imageTab} ${activeTab == 'preview' ? styles.imageTabActive : ''}`}
                onClick={() => handleTabClick('preview')}
              >
                {selectedFile ? selectedFile.name : 'Ch∆∞a c√≥ t·ªáp n√†o ƒë∆∞·ª£c ch·ªçn'}
              </button>
              <input
                id="fileInput"
                type="file"
                accept="image/*"
                onChange={handleFileChange}
                style={{ display: 'none' }}
              />
              {selectedFile && activeTab == 'preview' && (
                <div className={styles.imagePreview}>
                  <Image
                    src={URL.createObjectURL(selectedFile)}
                    alt="Preview"
                    width={300}
                    height={200}
                    style={{ objectFit: 'cover' }}
                  />
                </div>
              )}
            </div>
          </div>
        </div>

        <div className={styles.formGroup}>
          <label className={styles.label}>Tr·∫°ng th√°i</label>
          <div className={styles.radioGroup}>
            <label className={styles.radioLabel}>
              <input
                type="radio"
                name="status"
                value="true"
                checked={status == true}
                onChange={() => setStatus(true)}
                className={styles.radioInput}
              />
              <span className={styles.radioText}>ƒêang ho·∫°t ƒë·ªông</span>
            </label>
            <label className={styles.radioLabel}>
              <input
                type="radio"
                name="status"
                value="false"
                checked={status == false}
                onChange={() => setStatus(false)}
                className={styles.radioInput}
              />
              <span className={styles.radioText}>Kh√¥ng ho·∫°t ƒë·ªông</span>
            </label>
          </div>
        </div>

        <div className={styles.formActions2}>
          <button type="submit" className={styles.createButton}>
            T·∫°o m·ªõi
          </button>
          <Link href="/admin/payment-method" className={styles.cancelButton}>
            H·ªßy
          </Link>
        </div>

        <div className={styles.formGroup}>
          <div className={styles.infoBox}>
            <h4 className={styles.infoTitle}>üìã Th√¥ng tin quan tr·ªçng:</h4>
            <ul className={styles.infoList}>
              <li>C√°c tr∆∞·ªùng c√≥ d·∫•u <strong style={{ color: "red" }}>*</strong> l√† b·∫Øt bu·ªôc ph·∫£i nh·∫≠p.</li>
              <li>Tr∆∞·ªùng <em>T√™n ph∆∞∆°ng th·ª©c</em> l√† b·∫Øt bu·ªôc v√† ph·∫£i duy nh·∫•t.</li>
              <li>N√™n ch·ªçn tr·∫°ng th√°i ‚Äú<strong>ƒêang ho·∫°t ƒë·ªông</strong>‚Äù n·∫øu b·∫°n mu·ªën ph∆∞∆°ng th·ª©c thanh to√°n n√†y hi·ªÉn th·ªã tr√™n trang ng∆∞·ªùi d√πng.</li>
              <li>Ch·ªâ cho ph√©p t·∫£i ·∫£nh ƒë·ªãnh d·∫°ng: .jpg, .jpeg, .png, .webp.</li>
              <li>Dung l∆∞·ª£ng t·ªëi ƒëa m·ªói ·∫£nh: <strong>10MB</strong>.</li>
              <li>H√£y nh·∫≠p ƒë·∫ßy ƒë·ªß m√¥ t·∫£ s·∫£n ph·∫©m ƒë·ªÉ tƒÉng hi·ªáu qu·∫£ SEO v√† tr·∫£i nghi·ªám ng∆∞·ªùi d√πng.</li>
            </ul>
          </div>
        </div>

      </form>

      <ToastContainer position="top-right" autoClose={3000} />
    </main>
  );
};

export default AddPaymentMethodPage;
