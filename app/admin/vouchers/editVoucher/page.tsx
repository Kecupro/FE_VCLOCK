"use client";



import React, { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import styles from '../../assets/css/add.module.css';
import { toast, ToastContainer } from 'react-toastify';
import { useAppContext } from '../../../context/AppContext';

const EditVoucher = () => {
  const [voucherName, setVoucherName] = useState('');
  const [voucherCode, setVoucherCode] = useState('');
  const [selectedDiscountType, setSelectedDiscountType] = useState<'percentage' | 'fixed'>('fixed');
  const [discountValue, setDiscountValue] = useState<number>(0);
  const [minOrderValue, setMinOrderValue] = useState<number>(0);
  const [maxDiscount, setMaxDiscount] = useState<number>(0);
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');

  const searchParams = useSearchParams();
  const { isDarkMode } = useAppContext();
  const router = useRouter();
  const id = searchParams?.get('id');

  useEffect(() => {
    const html = document.documentElement;
    if (isDarkMode) html.classList.add(styles['dark-mode']);
    else html.classList.remove(styles['dark-mode']);
  }, [isDarkMode]);

  useEffect(() => {
    if (!id) return;
    const fetchData = async () => {
      try {
        const res = await fetch(`http://localhost:3000/api/admin/voucher/${id}`);
        const data = await res.json();
        const v = data.voucher;
        setVoucherName(v.voucher_name);
        setVoucherCode(v.voucher_code);
        setSelectedDiscountType(v.discount_type);
        setDiscountValue(v.discount_value);
        setMinOrderValue(v.minimum_order_value);
        setMaxDiscount(v.max_discount || '');
        setStartDate(v.start_date?.slice(0, 10));
        setEndDate(v.end_date?.slice(0, 10));
      } catch {
        toast.error('L·ªói khi t·∫£i d·ªØ li·ªáu voucher!');
      }
    };
    fetchData();
  }, [id]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!voucherName.trim() || !voucherCode.trim()) {
      toast.error('Vui l√≤ng nh·∫≠p t√™n v√† m√£ khuy·∫øn m√£i.');
      return;
    }

    const start = new Date(startDate);
      const end = new Date(endDate);
    
      if (end <= start) {
        toast.error('Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu.');
        return;
      }
    
      const today = new Date();
      today.setHours(0, 0, 0, 0);
    
      let status: 0 | 1 | 2;
      if (today < start) {
        status = 2;
      } else if (today > end) {
        status = 1;
      } else {
        status = 0;
    }

    const payload = {
      voucher_name: voucherName,
      voucher_code: voucherCode,
      discount_type: selectedDiscountType,
      discount_value: Number(discountValue),
      minimum_order_value: Number(minOrderValue) || 0,
      max_discount: Number(maxDiscount) || 0,
      start_date: startDate,
      end_date: endDate,
      status,
    };

    try {
      const res = await fetch(`http://localhost:3000/api/admin/voucher/sua/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      const data = await res.json();

      if (res.ok) {
        toast.success('C·∫≠p nh·∫≠t th√†nh c√¥ng!');
        setTimeout(() => {
          router.push('/admin/vouchers');
        }, 1500);
      } else {
        toast.error(`L·ªói: ${data.error || 'Kh√¥ng x√°c ƒë·ªãnh'}`);
      }
    } catch {
      toast.error('L·ªói khi c·∫≠p nh·∫≠t voucher.');
    }
  };

  return (
    <main className={styles.container}>
      <div className={styles.header}>
        <h1 className={styles.title}>Ch·ªânh s·ª≠a khuy·∫øn m√£i</h1>
        <button className={styles.returnButton} onClick={() => router.back()}>Quay l·∫°i</button>
      </div>

      <form className={styles.form} onSubmit={handleSubmit}>
        <div className={styles.formGroup}>
          <label className={styles.label}>T√™n m√£ khuy·∫øn m√£i <span style={{color: "red"}}>*</span></label>
          <input type="text" className={styles.input} value={voucherName} onChange={(e) => setVoucherName(e.target.value)} />
        </div>

        <div className={styles.formGroup}>
          <label className={styles.label}>M√£ khuy·∫øn m√£i <span style={{color: "red"}}>*</span></label>
          <input type="text" className={styles.input} value={voucherCode} onChange={(e) => setVoucherCode(e.target.value)} />
        </div>

        <div className={styles.formGroup}>
          <label className={styles.label}>Lo·∫°i gi·∫£m gi√° <span style={{color: "red"}}>*</span></label>
          <select className={styles.select} value={selectedDiscountType} onChange={(e) => setSelectedDiscountType(e.target.value as 'percentage' | 'fixed')}>
            <option value="fixed">Gi·∫£m theo s·ªë ti·ªÅn c·ªë ƒë·ªãnh (ƒë)</option>
            <option value="percentage">Gi·∫£m theo ph·∫ßn trƒÉm (%)</option>
          </select>
        </div>

        <div className={styles.formGroup}>
          <label className={styles.label}>Gi√° tr·ªã gi·∫£m <span style={{color: "red"}}>*</span></label>
          <input type="number" className={styles.input} value={discountValue} onChange={(e) => setDiscountValue(Number(e.target.value))} />
        </div>

        <div className={styles.formGroup}>
          <label className={styles.label}>Gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu (ƒë)</label>
          <input type="number" className={styles.input} value={minOrderValue} onChange={(e) => setMinOrderValue(Number(e.target.value))} />
        </div>

        <div className={styles.formGroup}>
          <label className={styles.label}>Gi√° tr·ªã gi·∫£m t·ªëi ƒëa (ƒë)</label>
          <input type="number" className={styles.input} value={maxDiscount} onChange={(e) => setMaxDiscount(Number(e.target.value))} />
        </div>

        <div className={styles.formGroup}>
          <label className={styles.label}>Ng√†y b·∫Øt ƒë·∫ßu <span style={{color: "red"}}>*</span></label>
          <input type="date" className={styles.input} value={startDate} onChange={(e) => setStartDate(e.target.value)} min={new Date().toISOString().split('T')[0]}/>
        </div>

        <div className={styles.formGroup}>
          <label className={styles.label}>Ng√†y k·∫øt th√∫c <span style={{color: "red"}}>*</span></label>
          <input type="date" className={styles.input} value={endDate} onChange={(e) => setEndDate(e.target.value)} min={startDate || new Date().toISOString().split('T')[0]}/>
        </div>

        <div className={styles.formActions}>
          <button type="submit" className={styles.createButton}>C·∫≠p nh·∫≠t</button>
          <button type="button" className={styles.cancelButton} onClick={() => router.back()}>H·ªßy</button>
        </div>

        <div className={styles.formGroup}>
          <div className={styles.infoBox}>
            <h4 className={styles.infoTitle}>üìã Th√¥ng tin quan tr·ªçng:</h4>
            <ul className={styles.infoList}>
              <li>C√°c tr∆∞·ªùng c√≥ d·∫•u <strong style={{ color: "red" }}>*</strong> l√† b·∫Øt bu·ªôc ph·∫£i nh·∫≠p.</li>
              <li>Tr∆∞·ªùng <em>T√™n m√£ khuy·∫øn m√£i</em> v√† <em>M√£ khuy·∫øn m√£i</em> l√† b·∫Øt bu·ªôc v√† ph·∫£i duy nh·∫•t.</li>
              <li>Ph·∫£i ch·ªçn <strong>Lo·∫°i gi·∫£m gi√°</strong> tr∆∞·ªõc khi nh·∫≠p <em>Gi√° tr·ªã gi·∫£m</em>.</li>
              <li>C√°c tr∆∞·ªùng <em>Gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu</em> v√† <em>Gi√° tr·ªã gi·∫£m t·ªëi ƒëa</em> ch·ªâ ch·∫•p nh·∫≠n s·ªë d∆∞∆°ng (ƒë).</li>
              <li><strong>Ng√†y k·∫øt th√∫c</strong> ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng <strong>ng√†y b·∫Øt ƒë·∫ßu</strong>.</li>
            </ul>
          </div>
        </div>
        
      </form>

      <ToastContainer position="top-right" autoClose={3000} />
    </main>
  );
};

export default EditVoucher;
