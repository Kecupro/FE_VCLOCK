'use client';
import React, { useEffect, useState, useRef } from 'react';
import { useAppContext } from '../../../context/AppContext';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { ToastContainer, toast } from 'react-toastify';
import styles from '../../assets/css/add.module.css';
import 'react-toastify/dist/ReactToastify.css';

const AddVoucher = () => {
  const [discountType, setDiscountType] = useState<'percentage' | 'fixed' | ''>('');
  const [discountValue, setDiscountValue] = useState<number | ''>('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [minOrderValue, setMinOrderValue] = useState<number | ''>('');
  const [maxDiscount, setMaxDiscount] = useState<number | ''>('');


  const voucherNameRef = useRef<HTMLInputElement>(null);
  const voucherCodeRef = useRef<HTMLInputElement>(null);

  const { isDarkMode } = useAppContext();
  const router = useRouter();

  useEffect(() => {
    const html = document.documentElement;
    if (isDarkMode) html.classList.add(styles['dark-mode']);
    else html.classList.remove(styles['dark-mode']);
  }, [isDarkMode]);

  const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();

  const voucher_name = voucherNameRef.current?.value.trim();
  const voucher_code = voucherCodeRef.current?.value.trim();

  const discount = Number(discountValue);
  const minOrder = Number(minOrderValue);
  const maxDisc = maxDiscount === '' ? 0 : Number(maxDiscount);

  if (isNaN(discount) || discount < 0) {
    toast.error('Gi√° tr·ªã gi·∫£m gi√° kh√¥ng ƒë∆∞·ª£c √¢m.');
    return;
  }

  if (isNaN(minOrder) || minOrder < 0) {
    toast.error('Gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu kh√¥ng ƒë∆∞·ª£c √¢m.');
    return;
  }

  if (!isNaN(maxDisc) && maxDisc < 0) {
    toast.error('Gi√° tr·ªã gi·∫£m t·ªëi ƒëa kh√¥ng ƒë∆∞·ª£c √¢m.');
    return;
  }

  if (!voucher_name || !voucher_code || !discountType || discountValue === '' || !startDate || !endDate) {
  toast.error('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc.');
  return;
  }

  const start = new Date(startDate);
  const end = new Date(endDate);

  if (end <= start) {
    toast.error('Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu.');
    return;
  }

  const today = new Date();
  today.setHours(0, 0, 0, 0);

  let status: 0 | 1 | 2;
  if (today < start) {
    status = 2;
  } else if (today > end) {
    status = 1;
  } else {
    status = 0;
  }

  const body = {
    voucher_name,
    voucher_code,
    discount_type: discountType,
    discount_value: Number(discountValue),
    start_date: startDate,
    end_date: endDate,
    minimum_order_value: Number(minOrderValue) || 0,
    max_discount: Number(maxDiscount) || 0,
    status,
  };

  try {
    const res = await fetch('http://localhost:3000/api/admin/voucher/them', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body),
    });

    const data = await res.json();

    if (res.ok) {
      toast.success('Th√™m voucher th√†nh c√¥ng!');
      setTimeout(() => router.push('/admin/vouchers'), 1500);
    } else {
      toast.error(`L·ªói: ${data.error || 'Kh√¥ng x√°c ƒë·ªãnh'}`);
    }
  } catch {
    toast.error('ƒê√£ x·∫£y ra l·ªói khi th√™m voucher.');
  }
  };

  return (
    <main className={styles.container}>
      <div className={styles.header}>
        <h1 className={styles.title}>Th√™m khuy·∫øn m√£i</h1>
        <Link href="/admin/vouchers" className={styles.returnButton}>
          Quay l·∫°i
        </Link>
      </div>

      <form className={styles.form} onSubmit={handleSubmit}>
        <div className={styles.formGroup}>
          <label className={styles.label}>T√™n m√£ khuy·∫øn m√£i <span style={{color: "red"}}>*</span></label>
          <input ref={voucherNameRef} type="text" className={styles.input} placeholder="Nh·∫≠p t√™n khuy·∫øn m√£i..." />
        </div>

        <div className={styles.formGroup}>
          <label className={styles.label}>M√£ khuy·∫øn m√£i <span style={{color: "red"}}>*</span></label>
          <input ref={voucherCodeRef} type="text" className={styles.input} placeholder="Nh·∫≠p m√£ khuy·∫øn m√£i..." />
        </div>

        <div className={styles.formGroup}>
          <label className={styles.label}>Lo·∫°i gi·∫£m gi√° <span style={{color: "red"}}>*</span></label>
          <select
            className={styles.select}
            value={discountType}
            onChange={(e) => setDiscountType(e.target.value as 'percentage' | 'fixed')}
          >
            <option value="">--- Ch·ªçn lo·∫°i gi·∫£m gi√° ---</option>
            <option value="percentage">Gi·∫£m theo ph·∫ßn trƒÉm (%)</option>
            <option value="fixed">Gi·∫£m theo s·ªë ti·ªÅn c·ªë ƒë·ªãnh (ƒë)</option>
          </select>
        </div>

        <div className={styles.formGroup}>
          <label className={styles.label}>Gi√° tr·ªã gi·∫£m <span style={{color: "red"}}>*</span></label>
          <input
            type="number"
            value={discountValue}
            onChange={(e) => setDiscountValue(Number(e.target.value))}
            className={styles.input}
            placeholder={
              discountType == 'percentage'
                ? 'Nh·∫≠p ph·∫ßn trƒÉm gi·∫£m (VD: 10%)'
                : discountType == 'fixed'
                ? 'Nh·∫≠p s·ªë ti·ªÅn gi·∫£m (VD: 500.000ƒë)'
                : 'Ch·ªçn lo·∫°i gi·∫£m gi√° tr∆∞·ªõc'
            }
          />
        </div>

        <div className={styles.formGroup}>
          <label className={styles.label}>Gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu (ƒë)</label>
          <input
            type="number"
            value={minOrderValue}
            onChange={(e) => setMinOrderValue(Number(e.target.value))}
            className={styles.input}
            placeholder="Nh·∫≠p gi√° tr·ªã t·ªëi thi·ªÉu (VD: 200.000ƒë)"
          />
        </div>

        <div className={styles.formGroup}>
          <label className={styles.label}>Gi√° tr·ªã gi·∫£m t·ªëi ƒëa (ƒë)</label>
          <input
            type="number"
            value={maxDiscount}
            onChange={(e) => setMaxDiscount(Number(e.target.value))}
            className={styles.input}
            placeholder="Nh·∫≠p gi·∫£m t·ªëi ƒëa (VD: 100.000ƒë)"
          />
        </div>

        <div className={styles.formGroup}>
          <label className={styles.label}>Ng√†y b·∫Øt ƒë·∫ßu <span style={{color: "red"}}>*</span></label>
          <input type="date" className={styles.input} value={startDate} onChange={(e) => setStartDate(e.target.value)} min={new Date().toISOString().split('T')[0]}/>
        </div>

        <div className={styles.formGroup}>
          <label className={styles.label}>Ng√†y k·∫øt th√∫c <span style={{color: "red"}}>*</span></label>
          <input type="date" className={styles.input} value={endDate} onChange={(e) => setEndDate(e.target.value)}  min={startDate || new Date().toISOString().split('T')[0]}/>
        </div>

        <div className={styles.formActions}>
          <button type="submit" className={styles.createButton}>T·∫°o m·ªõi</button>
          <Link href="/admin/vouchers" className={styles.cancelButton}>H·ªßy</Link>
        </div>

        <div className={styles.formGroup}>
          <div className={styles.infoBox}>
            <h4 className={styles.infoTitle}>üìã Th√¥ng tin quan tr·ªçng:</h4>
            <ul className={styles.infoList}>
              <li>C√°c tr∆∞·ªùng c√≥ d·∫•u <strong style={{ color: "red" }}>*</strong> l√† b·∫Øt bu·ªôc ph·∫£i nh·∫≠p.</li>
              <li>Tr∆∞·ªùng <em>T√™n m√£ khuy·∫øn m√£i</em> v√† <em>M√£ khuy·∫øn m√£i</em> l√† b·∫Øt bu·ªôc v√† ph·∫£i duy nh·∫•t.</li>
              <li>Ph·∫£i ch·ªçn <strong>Lo·∫°i gi·∫£m gi√°</strong> tr∆∞·ªõc khi nh·∫≠p <em>Gi√° tr·ªã gi·∫£m</em>.</li>
              <li>C√°c tr∆∞·ªùng <em>Gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu</em> v√† <em>Gi√° tr·ªã gi·∫£m t·ªëi ƒëa</em> ch·ªâ ch·∫•p nh·∫≠n s·ªë d∆∞∆°ng (ƒë).</li>
              <li><strong>Ng√†y k·∫øt th√∫c</strong> ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng <strong>ng√†y b·∫Øt ƒë·∫ßu</strong>.</li>
            </ul>
          </div>
        </div>

      </form>

      <ToastContainer position="top-right" autoClose={3000} />
    </main>
  );
};

export default AddVoucher;
